package com.aspire.daydreaming.bundle.myActivity.createActivity.adapter;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.support.v7.widget.RecyclerView;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import com.aspire.daydreaming.R;import com.squareup.picasso.Picasso;import java.util.List;import butterknife.Bind;import butterknife.ButterKnife;/** * @Name: ImageViewAdapter * @Author: yeliang * @Date: 2016/8/25 */public class ImageViewAdapter extends RecyclerView.Adapter<ImageViewAdapter.ImageHolder> {    private static final String TAG = "ImageViewAdapter";    private List<Bitmap> mBitmaps;    private String[] mUrls;    private List<String> mPaths;    private TYPE mTYPE;    private int mScreenWidth = 0;    public void setScreenWidth(int screenWidth) {        mScreenWidth = screenWidth;    }    private enum TYPE {        BITMAP,        URL,        PATH    }    private OnItemClickListener mListener;    public ImageViewAdapter(List<Bitmap> bitmaps) {        mBitmaps = bitmaps;        mTYPE = TYPE.BITMAP;    }    public ImageViewAdapter(String[] urls) {        mUrls = urls;        mTYPE = TYPE.URL;    }    public ImageViewAdapter(List<Bitmap> bitmaps, String[] urls, List<String> paths) {        mBitmaps = bitmaps;        mUrls = urls;        mPaths = paths;        if (mPaths != null) {            mTYPE = TYPE.PATH;        } else if (mBitmaps != null) {            mTYPE = TYPE.BITMAP;        } else if (mUrls != null) {            mTYPE = TYPE.URL;        }        Log.i(TAG, "ImageViewAdapter: " + mTYPE);    }    @Override    public ImageHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_add_image, parent, false);        return new ImageHolder(view);    }    @Override    public void onBindViewHolder(ImageHolder holder, int position) {        switch (mTYPE) {            case BITMAP:                holder.setData(mBitmaps.get(position));                break;            case URL:                holder.setData(mUrls[position]);                break;            case PATH:                holder.setPathData(mPaths.get(position));                break;        }        holder.itemView.setOnClickListener(v -> mListener.onItemClick(position));    }    @Override    public int getItemCount() {        switch (mTYPE) {            case BITMAP:                return mBitmaps.size();            case URL:                return mUrls.length;            case PATH:                return mPaths.size();        }        return 0;    }    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {        if (onItemClickListener != null) {            mListener = onItemClickListener;        } else {            mListener = position -> {            };        }    }    public interface OnItemClickListener {        void onItemClick(int position);    }    class ImageHolder extends RecyclerView.ViewHolder {        @Bind(R.id.iv_icon)        ImageView mIvIcon;        ImageHolder(View itemView) {            super(itemView);            ButterKnife.bind(this, itemView);            int width = 0;            LinearLayout.LayoutParams params;            if (getItemCount() > 1) {                int size = (getItemCount() > 0 && getItemCount() < 4) ? getItemCount() : 3;                width = mScreenWidth / size - 4;                params = new LinearLayout.LayoutParams(width, width);                mIvIcon.setLayoutParams(params);            }            Log.i(TAG, "ImageHolder: mScreenWidth = " + mScreenWidth);            Log.i(TAG, "ImageHolder: width = " + width);        }        public void setData(Bitmap data) {            mIvIcon.setImageBitmap(data);        }        public void setPathData(String path) {            Log.i(TAG, "setPathData: " + path);            if (path.equals("0")) {                mIvIcon.setImageBitmap(BitmapFactory.decodeResource(itemView.getContext().getResources(), R.mipmap.add_img));            } else {                Picasso.with(itemView.getContext())                        .load(path)                        .centerCrop()                        .placeholder(R.mipmap.img_custom)                        .into(mIvIcon);            }        }        public void setData(String url) {            if (!TextUtils.isEmpty(url)) {                Picasso.with(itemView.getContext())                        .load(url)                        .resize(640, 360)                        .centerCrop()                        .placeholder(R.mipmap.img_custom)                        .into(mIvIcon);            }        }    }}