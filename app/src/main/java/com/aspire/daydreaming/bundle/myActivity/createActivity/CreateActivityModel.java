package com.aspire.daydreaming.bundle.myActivity.createActivity;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.util.Log;import com.aspire.daydreaming.core.app.other.AppApiImpl;import com.aspire.daydreaming.core.base.BaseEntity;import com.aspire.daydreaming.core.base.RxSchedulers;import com.aspire.daydreaming.core.model.info.ActivityInfo;import com.aspire.daydreaming.core.model.leancloud.ActivityModel;import com.aspire.daydreaming.core.utils.BitmapUtil;import com.aspire.daydreaming.core.utils.FileUtil;import java.io.File;import java.util.ArrayList;import java.util.List;import okhttp3.MediaType;import okhttp3.RequestBody;import rx.Observable;/** * @Name: CreateActivityModel * @Author: yeliang * @Date: 2016/8/24 */class CreateActivityModel implements CreateActivityContract.Model {    private static final String TAG = "CreateActivityModel";    @Override    public Observable<BaseEntity.BaseBean> uploadImage(String path) {        Bitmap bitmap = BitmapFactory.decodeFile(path);        Bitmap bitmapResult = BitmapUtil.imageZoom(bitmap);        String[] name = path.split("/");        String mPath = FileUtil.saveImage(bitmapResult, name[name.length - 1]);        Log.i(TAG, "uploadImage: before = " + path);        Log.i(TAG, "uploadImage: after = " + mPath);        File file = new File(mPath);        return new AppApiImpl()                .upFile(file.getName(), RequestBody.create(MediaType.parse("image/*"), file))                .compose(RxSchedulers.io_main());    }    @Override    public Observable<ActivityInfo> createActivity(ActivityModel activityModel) {        Observable.empty().subscribe();        return new AppApiImpl().createActivity(activityModel).compose(RxSchedulers.new_thread());    }    public Observable<Bitmap> compressBitmap(String path) {        Observable.empty().subscribe();        return Observable.create((Observable.OnSubscribe<Bitmap>) subscriber -> {//            Bitmap bitmapResult = BitmapUtil.decodeSampledBitmapFromFile(path, 100, 100);//            Bitmap bitmapResult = BitmapUtil.compressImage(BitmapFactory.decodeFile(path));            Bitmap bitmapResult = BitmapUtil.imageZoom(BitmapFactory.decodeFile(path));            subscriber.onNext(bitmapResult);            subscriber.onCompleted();        }).compose(RxSchedulers.io_main());    }    public Observable<List<Bitmap>> compressBitmaps(List<String> paths) {        Observable.empty().subscribe();        List<Bitmap> bitmaps = new ArrayList<>();        Observable.from(paths).subscribe(s -> {            bitmaps.add(BitmapUtil.imageZoom(BitmapFactory.decodeFile(s)));        });        return Observable.create(subscriber -> {            subscriber.onNext(bitmaps);            subscriber.onCompleted();        });    }    public Observable<List<BaseEntity.BaseBean>> uploadImages(List<String> paths) {        Observable.from(paths).subscribe(s -> {            Bitmap bitmap = BitmapFactory.decodeFile(s);            Bitmap bitmapResult = BitmapUtil.imageZoom(bitmap);            String[] name = s.split("/");            String mPath = FileUtil.saveImage(bitmapResult, name[name.length - 1]);            Log.i(TAG, "uploadImage: before = " + s);            Log.i(TAG, "uploadImage: after = " + mPath);            File file = new File(mPath);            new AppApiImpl()                    .upFile(file.getName(), RequestBody.create(MediaType.parse("image/*"), file))                    .compose(RxSchedulers.io_main())                    .subscribe(baseBean -> {                    });        });        return null;    }}