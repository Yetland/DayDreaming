package com.aspire.daydreaming.bundle.main;import android.content.Intent;import android.os.Bundle;import android.support.design.widget.NavigationView;import android.support.v4.view.GravityCompat;import android.support.v4.view.ViewPager;import android.support.v4.widget.DrawerLayout;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.aspire.daydreaming.R;import com.aspire.daydreaming.bundle.login.LoginActivity;import com.aspire.daydreaming.bundle.main.adapter.ActivityAdapter;import com.aspire.daydreaming.bundle.main.adapter.MainActivityPagerAdapter;import com.aspire.daydreaming.bundle.myActivity.MyActivity;import com.aspire.daydreaming.bundle.myActivity.createActivity.CreateActivity;import com.aspire.daydreaming.core.base.BaseActivity;import com.aspire.daydreaming.core.model.info.ActivityInfo;import com.aspire.daydreaming.core.model.info.Data;import com.aspire.daydreaming.core.model.info.ImageItem;import com.aspire.daydreaming.core.model.info._User;import com.aspire.daydreaming.core.utils.ActivityManager;import com.aspire.daydreaming.core.utils.BaseTools;import com.aspire.daydreaming.core.utils.ConstantUtil;import com.aspire.daydreaming.core.utils.SharedPreferenceUtil;import com.squareup.picasso.Picasso;import java.util.ArrayList;import java.util.List;import butterknife.Bind;import butterknife.OnClick;public class MainActivity extends BaseActivity<MainPresenter, MainModel>        implements NavigationView.OnNavigationItemSelectedListener, MainContract.View {    @Bind(R.id.toolbar)    Toolbar toolbar;    @Bind(R.id.tv_title)    TextView tvTitle;    @Bind(R.id.tv_update)    TextView tvUpdate;    @Bind(R.id.vp_image)    ViewPager vpImage;    @Bind(R.id.ll_dot)    LinearLayout llDot;    @Bind(R.id.rl_image)    RelativeLayout rlImage;    @Bind(R.id.rv_activity_list)    RecyclerView rvActivityList;    @Bind(R.id.ll_main_view)    LinearLayout llMainView;    @Bind(R.id.srl_refresh)    SwipeRefreshLayout srlRefresh;    @Bind(R.id.nav_view)    NavigationView navView;    @Bind(R.id.drawer_layout)    DrawerLayout drawerLayout;    @Bind(R.id.bt_retry)    Button btRetry;    @Bind(R.id.tv_error_message)    TextView tvErrorMessage;    @Bind(R.id.ll_retry)    LinearLayout llRetry;    @Bind(R.id.tv_loading)    TextView tvLoading;    @Bind(R.id.tv_no_data)    TextView tvNoData;    private _User mUser;    private int mDotIndex = 0;// 当前选中的点    private int imageSize = 0;// 图片数量    private int mScreenWidth;// 屏幕宽度    private ActivityAdapter adapter;    private List<ActivityInfo> activityModels;    @Override    public int getLayoutId() {        return R.layout.activity_main;    }    @Override    protected void initView(Bundle savedInstanceState) {        toolbar.setTitle("");// 截取toolbar，设置标题为空        tvTitle.setText("首页");// 设置标题        setSupportActionBar(toolbar);        mScreenWidth = BaseTools.getWindowsWidth(MainActivity.this);// 获取屏幕宽度        initDrawer();// 初始化侧滑栏        initHeaderView();//初始化侧栏头部        srlRefresh.setRefreshing(true);        loadData();        srlRefresh.setOnRefreshListener(this::loadData);    }    private void loadData() {        Log.i(TAG, "loadData: " + mUser.getUsername() + mUser.getPassword());        mPresenter.login(mUser.getUsername(), mUser.getPassword());    }    public void initDrawer() {        Log.e(TAG, "initDrawer:");        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(                this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);        drawerLayout.setDrawerListener(toggle);        toggle.syncState();        navView.setNavigationItemSelectedListener(this);    }    private void initHeaderView() {        Log.e(TAG, "initHeaderView:");        // 从内存获取当前User的信息        mUser = (_User) SharedPreferenceUtil.readObject(MainActivity.this,                ConstantUtil.key.USER_INFO,                ConstantUtil.fileName.USER);        View mHeaderView = navView.getHeaderView(0);        ImageView avatar = (ImageView) mHeaderView.findViewById(R.id.iv_avatar);        TextView nick = (TextView) mHeaderView.findViewById(R.id.tv_username);        nick.setText(mUser.getUsername());        TextView sign = (TextView) mHeaderView.findViewById(R.id.tv_sign);        sign.setText(mUser.getSign());        if (!TextUtils.isEmpty(mUser.getAvatarUrl())) {            Picasso.with(this)                    .load(mUser.getAvatarUrl())                    .resize(640, 360)                    .centerCrop()                    .placeholder(R.mipmap.img_custom)                    .into(avatar);        }        // 跳转到更新用户信息        avatar.setOnClickListener(view -> {            // 跳转            drawerLayout.closeDrawer(GravityCompat.START);        });    }    @Override    public void onLoading(String msg) {        srlRefresh.setRefreshing(true);        llRetry.setVisibility(View.GONE);    }    @Override    public void onLoginComplete(_User user) {        user.setPassword(mUser.getPassword());        SharedPreferenceUtil.saveObject(this, ConstantUtil.key.USER_INFO, user, ConstantUtil.fileName.USER);        initHeaderView();        mPresenter.getImage();    }    @Override    public void onGetImgComplete(Data<ImageItem> imageItem) {        srlRefresh.setRefreshing(false);        llRetry.setVisibility(View.GONE);        llMainView.setVisibility(View.VISIBLE);        imageSize = imageItem.results.size();        initDots(imageSize);        initImageLayout(imageItem.results);    }    @Override    public void onGetActivityModelComplete(Data<ActivityInfo> activityModels) {    }    private void initDots(int imageSize) {        Log.e(TAG, "initDots:");        llDot.removeAllViews();        for (int i = 0; i < imageSize; i++) {            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(                    ViewGroup.LayoutParams.WRAP_CONTENT,                    ViewGroup.LayoutParams.WRAP_CONTENT);            params.rightMargin = 8;            ImageView imgDot = new ImageView(MainActivity.this);            imgDot.setId(i);            imgDot.setImageDrawable(getResources().getDrawable(R.drawable.dot));            if (mDotIndex == i) {                imgDot.setSelected(true);            }            llDot.addView(imgDot, i, params);        }    }    // 设置当前显示的白点    private void setDot(int position, int imageSize) {        mDotIndex = position;        initDots(imageSize);    }    // 图片显示的初始化    private void initImageLayout(List<ImageItem> imageItems) {        Log.e(TAG, "initImageLayout:");        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(                ViewGroup.LayoutParams.WRAP_CONTENT,                ViewGroup.LayoutParams.WRAP_CONTENT);        params.height = (int) ((mScreenWidth * 9.0) / 16.0);        params.width = mScreenWidth;        rlImage.setLayoutParams(params);        List<String> imageUrl = new ArrayList<>();        for (int i = 0; i < imageSize + 2; i++) {            if (i == 0) {                imageUrl.add(imageItems.get(imageSize - 1).getUrl());            } else if (i == imageSize + 1) {                imageUrl.add(imageItems.get(0).getUrl());            } else {                imageUrl.add(imageItems.get(i - 1).getUrl());            }        }        MainActivityPagerAdapter adapter = new MainActivityPagerAdapter(MainActivity.this, imageUrl);        vpImage.setAdapter(adapter);        vpImage.setCurrentItem(1);        vpImage.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                if (position == 0) {                    setDot(imageSize - 1, imageSize);                    vpImage.setCurrentItem(imageSize, false);                    return;                }                if (position == imageSize + 1) {                    setDot(0, imageSize);                    vpImage.setCurrentItem(1, false);                    return;                }                setDot(position - 1, imageSize);                vpImage.setCurrentItem(position);            }            @Override            public void onPageScrollStateChanged(int state) {            }        });    }    @Override    public void onError(String errorMsg) {        srlRefresh.setRefreshing(false);        llMainView.setVisibility(View.GONE);        llRetry.setVisibility(View.VISIBLE);        tvErrorMessage.setText(errorMsg);    }    @Override    public void onBackPressed() {        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {            drawerLayout.closeDrawer(GravityCompat.START);        } else {            super.onBackPressed();        }    }    @Override    public boolean onNavigationItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.nav_my_school_mate:                startActivity(new Intent().setClass(this, CreateActivity.class));                break;            case R.id.nav_notification:                break;            case R.id.nav_message_board:                break;            case R.id.nav_activity:                startActivity(new Intent().setClass(this, MyActivity.class));                break;            case R.id.nav_about_us:                break;            case R.id.nav_update:                break;            case R.id.nav_log_out:                SharedPreferenceUtil.cleanData(this, ConstantUtil.fileName.USER);                ActivityManager.getInstance().destroyAllActivity();                startActivity(new Intent().setClass(this, LoginActivity.class));                finish();                break;        }        return true;    }    @OnClick(R.id.bt_retry)    public void onClick() {        onLoading("正在重新加载...");        loadData();    }}