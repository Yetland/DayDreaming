package com.aspire.daydreaming.bundle.myActivity.createActivity;import android.app.ProgressDialog;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Bundle;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.aspire.daydreaming.R;import com.aspire.daydreaming.bundle.myActivity.createActivity.adapter.ImageViewAdapter;import com.aspire.daydreaming.core.base.BaseActivity;import com.aspire.daydreaming.core.base.BaseEntity;import com.aspire.daydreaming.core.model.info.ActivityInfo;import com.aspire.daydreaming.core.model.info._User;import com.aspire.daydreaming.core.model.leancloud.ActivityModel;import com.aspire.daydreaming.core.utils.ApiUtil;import com.aspire.daydreaming.core.utils.ConstantUtil;import com.aspire.daydreaming.core.utils.SharedPreferenceUtil;import java.util.ArrayList;import java.util.List;import butterknife.Bind;import butterknife.OnClick;import cn.finalteam.rxgalleryfinal.RxGalleryFinal;import cn.finalteam.rxgalleryfinal.bean.MediaBean;import cn.finalteam.rxgalleryfinal.imageloader.ImageLoaderType;import cn.finalteam.rxgalleryfinal.rxbus.RxBusResultSubscriber;import cn.finalteam.rxgalleryfinal.rxbus.event.ImageMultipleResultEvent;public class CreateActivity extends BaseActivity<CreateActivityPresenter, CreateActivityModel> implements CreateActivityContract.View {    @Bind(R.id.toolbar)    Toolbar toolbar;    @Bind(R.id.tv_title)    TextView tvTitle;    @Bind(R.id.tv_update)    TextView tvUpdate;    @Bind(R.id.et_content)    EditText etContent;    @Bind(R.id.rv_img)    RecyclerView rvImg;    private int maxSize = 2;    private ProgressDialog mDialog;    private List<String> mUrl;    private List<Bitmap> mThumbnailBitmaps;// 缩略图，显示的图片    private List<String> mBitmapPaths;// 路径, 这是原始图路径    private _User mUser;    private boolean isUploadSuccess = true;    @Override    public int getLayoutId() {        return R.layout.activity_create;    }    @Override    protected void initView(Bundle savedInstanceState) {        toolbar.setTitle(" ");        tvTitle.setText("创建活动");        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        toolbar.setNavigationOnClickListener(view -> onBackPressed());        tvUpdate.setVisibility(View.VISIBLE);        tvUpdate.setText("完成");        mUser = (_User) SharedPreferenceUtil.readObject(this, ConstantUtil.key.USER_INFO, ConstantUtil.fileName.USER);        if (mUser == null) {            Toast.makeText(CreateActivity.this, "请登录后操作", Toast.LENGTH_SHORT).show();            finish();        }        mDialog = new ProgressDialog(this);        mDialog.setCancelable(false);        mBitmapPaths = new ArrayList<>();        mUrl = new ArrayList<>();        GridLayoutManager manager = new GridLayoutManager(this, 3);        rvImg.setLayoutManager(manager);        mThumbnailBitmaps = new ArrayList<>();        mThumbnailBitmaps.add(BitmapFactory.decodeResource(getResources(), R.mipmap.add_img));        setData(mThumbnailBitmaps);//        mThumbnailBitmaps.add("0");//        setData(mThumbnailBitmaps);    }    void setData(List<Bitmap> bitmaps) {        ImageViewAdapter adapter = new ImageViewAdapter(bitmaps);        rvImg.setAdapter(adapter);        adapter.setOnItemClickListener(position -> {            if (mBitmapPaths.size() >= maxSize) {                Toast.makeText(CreateActivity.this, "最多只能添加" + maxSize + "张图哦", Toast.LENGTH_SHORT).show();                return;            }            if (position == 0) {                RxGalleryFinal                        .with(this)                        .image()// 图片                        .multiple()                        .maxSize(maxSize)                        .imageLoader(ImageLoaderType.PICASSO)                        .subscribe(new RxBusResultSubscriber<ImageMultipleResultEvent>() {                            @Override                            protected void onEvent(ImageMultipleResultEvent result) throws Exception {                                if (mBitmapPaths.size() + result.getResult().size() > maxSize) {                                    Toast.makeText(CreateActivity.this, "最多只能添加" + maxSize + "张图哦", Toast.LENGTH_SHORT).show();                                    return;                                }                                List<MediaBean> list = result.getResult();                                for (MediaBean bean : list) {                                    String path = bean.getOriginalPath();                                    if (!mBitmapPaths.contains(path)) {                                        mBitmapPaths.add(path);// 添加路径                                        mThumbnailBitmaps.add(BitmapFactory.decodeFile(bean.getThumbnailBigPath()));                                    }                                }                                setData(mThumbnailBitmaps);//                                mPresenter.compressBitmaps(mBitmapPaths);                            }                        })                        .openGallery();            }            Toast.makeText(CreateActivity.this, position + "", Toast.LENGTH_SHORT).show();        });    }    @OnClick(R.id.tv_update)    public void onClick() {        if (TextUtils.isEmpty(etContent.getText().toString())) {            Toast.makeText(CreateActivity.this, "写点什么吧...", Toast.LENGTH_SHORT).show();        } else if (mBitmapPaths.size() == 0) {            Toast.makeText(CreateActivity.this, "还没加图片呢...", Toast.LENGTH_SHORT).show();        } else {            onLoading("上传图片中...");            isUploadSuccess = true;            for (String bitmapPath : mBitmapPaths) {                Log.i(TAG, "onClick: " + bitmapPath);                mPresenter.uploadImage(bitmapPath);                if (!isUploadSuccess) {                    Toast.makeText(CreateActivity.this, "上传图片失败", Toast.LENGTH_SHORT).show();                    break;                }            }        }    }    @Override    public void onLoading(String msg) {        mDialog.setMessage(msg);        mDialog.show();    }    @Override    public void uploadImageSuccess(BaseEntity.BaseBean baseBean) {        isUploadSuccess = true;        mUrl.add(baseBean.url);        Log.i(TAG, "uploadImageSuccess: " + baseBean.url);        // 当全部图片上传完成后，就可以执行创建活动操作了        createActivity();    }    @Override    public void createActivity() {        if (isUploadSuccess && mUrl.size() == mBitmapPaths.size()) {            mDialog.dismiss();            Toast.makeText(CreateActivity.this, "上传图片成功", Toast.LENGTH_SHORT).show();            onLoading("正在创建活动...");            ActivityModel activityModel = new ActivityModel(ApiUtil.getPointer(mUser), etContent.getText().toString(), "");            String url = "";            for (String s : mUrl) {                url = url + s + ";";            }            activityModel.url = url;            mPresenter.createActivity(activityModel);        }    }    @Override    public void createActivitySuccess(ActivityInfo activityInfo) {        mDialog.dismiss();        Log.i(TAG, "createActivitySuccess: " + activityInfo.toString());        Toast.makeText(CreateActivity.this, "创建活动成功", Toast.LENGTH_SHORT).show();        setResult(1);        finish();    }    @Override    public void onError(String errorMsg) {        isUploadSuccess = false;        mDialog.dismiss();        Toast.makeText(CreateActivity.this, errorMsg, Toast.LENGTH_SHORT).show();    }}