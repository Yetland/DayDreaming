package com.aspire.daydreaming.core.app;import android.media.Image;import android.util.Log;import com.aspire.daydreaming.core.model.CreatedResult;import com.aspire.daydreaming.core.model.Data;import com.aspire.daydreaming.core.model.UserModel;import java.io.IOException;import okhttp3.RequestBody;import retrofit2.Response;import retrofit2.http.Body;import retrofit2.http.Path;import retrofit2.http.Query;import rx.Observable;/** * @Name: ApiServiceImpl * @Author: yeliang * @Date: 2016/8/23 */public class ApiServiceImpl implements RetrofitApi {    public static final String TAG = "ApiServiceImpl";    public ApiServiceImpl() {    }    @Override    public Observable<UserModel> login(@Query("username") String username, @Query("password") String password) {        Observable.empty().subscribe();        return Observable.create(subscriber -> {            try {                Response<UserModel> response = RestApi.getInstance().jsonService.login(username, password).execute();                if (response.isSuccessful()) {                    subscriber.onNext(response.body());                    subscriber.onCompleted();                } else {                    Log.i(TAG, "login: " + response.code());                    Log.i(TAG, "login: " + response.isSuccessful());                    Log.i(TAG, "login: " + response.errorBody().string());                    subscriber.onError(new Throwable("用户名或密码错误"));                    subscriber.onCompleted();                }            } catch (IOException e) {                e.printStackTrace();                subscriber.onError(new Throwable("登录失败"));                subscriber.onCompleted();            }        });    }    @Override    public Observable<CreatedResult> createUser(@Body UserModel user) {        return null;    }    @Override    public Observable<Data<UserModel>> getAllUser(@Query("skip") int skip, @Query("limit") int limit) {        return null;    }    @Override    public Observable<Data<Image>> getAllImages(@Query("where") String where, @Query("order") String order, @Query("skip") int skip, @Query("limit") int limit) {        return null;    }    @Override    public Observable<CreatedResult> upFile(@Path("name") String name, @Body RequestBody body) {        return null;    }}