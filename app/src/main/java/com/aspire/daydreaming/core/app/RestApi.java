package com.aspire.daydreaming.core.app;import android.util.Log;import com.aspire.daydreaming.core.app.other.AppService;import com.aspire.daydreaming.core.app.user.UserService;import com.aspire.daydreaming.core.utils.NetWorkUtil;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import java.io.File;import java.io.IOException;import java.util.concurrent.TimeUnit;import okhttp3.Cache;import okhttp3.CacheControl;import okhttp3.Interceptor;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Retrofit;import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;import retrofit2.converter.gson.GsonConverterFactory;import retrofit2.converter.scalars.ScalarsConverterFactory;/** * @Name: RestApi * @Author: yeliang * @Date: 2016/8/23 */public class RestApi {    private static final String X_LC_Id = "hq5TP1JfC8IalSWXQCYNwVk4-gzGzoHsz";    private static final String X_LC_Key = "O51KjzzevmasxS3RRCbTDwq0";    private static final String BASE_URL = "https://leancloud.cn:443/1.1/";    public UserService jsonService;    public AppService appService;    //构造方法私有    private RestApi() {        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        File cacheFile = new File(DDApplication.getContext().getCacheDir(), "cache");        Cache cache = new Cache(cacheFile, 1024 * 1024 * 100); //100Mb        Interceptor mInterceptor = (chain) -> chain.proceed(chain.request().newBuilder()                .addHeader("X-LC-Id", X_LC_Id)                .addHeader("X-LC-Key", X_LC_Key)                .addHeader("Content-Type", "application/json")                .build());        OkHttpClient okHttpClient = new OkHttpClient.Builder()                .readTimeout(8000, TimeUnit.MILLISECONDS)                .connectTimeout(8000, TimeUnit.MILLISECONDS)                .addInterceptor(mInterceptor)                .addInterceptor(interceptor)                .addNetworkInterceptor(new HttpCacheInterceptor())                .cache(cache)                .build();        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").serializeNulls().create();        // 返回值一定，可以直接解析为json        Retrofit jsonRetrofit = new Retrofit.Builder()                .client(okHttpClient)                .addConverterFactory(GsonConverterFactory.create(gson))                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())                .baseUrl(BASE_URL)                .build();        // 返回的类型为String，返回后将数据解析        Retrofit stringRetrofit = new Retrofit.Builder()                .client(okHttpClient)                .addConverterFactory(ScalarsConverterFactory.create())                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())                .baseUrl(BASE_URL)                .build();        jsonService = jsonRetrofit.create(UserService.class);        appService = jsonRetrofit.create(AppService.class);    }    //在访问HttpMethods时创建单例    private static class SingletonHolder {        private static final RestApi INSTANCE = new RestApi();    }    //获取单例    public static RestApi getInstance() {        return SingletonHolder.INSTANCE;    }    private class HttpCacheInterceptor implements Interceptor {        @Override        public Response intercept(Chain chain) throws IOException {            Request request = chain.request();            if (!NetWorkUtil.isNetConnected(DDApplication.getContext())) {                request = request.newBuilder()                        .cacheControl(CacheControl.FORCE_CACHE)                        .build();                Log.d("OkHttp", "no network");            }            Response originalResponse = chain.proceed(request);            if (NetWorkUtil.isNetConnected(DDApplication.getContext())) {                //有网的时候读接口上的@Headers里的配置，你可以在这里进行统一的设置                String cacheControl = request.cacheControl().toString();                return originalResponse.newBuilder()                        .header("Cache-Control", cacheControl)                        .removeHeader("Pragma")                        .build();            } else {                return originalResponse.newBuilder()                        .header("Cache-Control", "public, only-if-cached, max-stale=2419200")                        .removeHeader("Pragma")                        .build();            }        }    }}